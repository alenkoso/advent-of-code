The idea is that every valid assignment of letters to segments is related to any other valid assignment of letters to segments by some unique mapping. If you know both assignments, you can just compute the mapping according to which segments become which: if a segment that was "a" in configuration 1 is now an "e" in configuration 2, we know "a" maps to "e". This mapping is a bijection, since we can't have any duplicates (two segments in one configuration can't map to the same segment in another configuration, and vice versa), which means that we can represent it with a permutation.

"abcdefg" is the identity permutation, which means "a" maps to "a", "b" maps to "b", etc. "bacdefg" would be similar, except "a" and "b" are swapped. I'm arbitrarily deciding that "abcdefg" will correspond to the configuration given in the example:

 dddd
e    a
e    a
 ffff
g    b
g    b
 cccc
Something like "cbdaefg" would be

 aaaa
e    c
e    c
 ffff
g    b
g    b
 dddd
However, here, for each row, we don't know the true configuration, or equivalently, the true mapping/permutation to the "abcdefg" configuration. My solution essentially brute forces this: it tries all possible permutations, and for each permutation, it performs the mapping. If performing the mapping on the 10 digits gives us ["acedgfb", "cdfbe", "gcdfa", "fbcad", "dab", "cefabd", "cdfgeb", "eafb", "cagedb", "ab"] then it's valid, since these are the representations of the 10 digits in the "identity configuration" that I chose. Then, for the right side of each input (after the " | "), I can map them according to the one permutation that's valid, and then decode according to which letters mean which digits (from the "abcdefg" configuration).

For example, suppose it was the second permutation I give above, "cbdaefg". Then, after brute forcing, I'd know that "c" => "a" and "b" => "b", so if "cb" appeared on the right side of the input, I would decode it to "ab", which would then decode to "1" in the original configuration.

Hopefully that makes sense? I think it's a little harder to put into words than I first thought it would be.