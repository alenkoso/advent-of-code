name: Advent of Code CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
    
    - name: Lint tests with flake8
      run: |
        flake8 src/*/Day_*/test_*.py --count --max-complexity=10 --max-line-length=120 --statistics
    
    - name: Find and run tests
      run: |
        for year_dir in src/*/; do
          if [ ! -d "$year_dir" ]; then continue; fi
          echo "Processing year: $year_dir"
          
          for day_dir in "$year_dir"Day_*/; do
            if [ ! -d "$day_dir" ]; then continue; fi
            echo "Processing day: $day_dir"
            
            # Check if test file exists
            if ls "$day_dir"test_*.py 1> /dev/null 2>&1; then
              echo "Running tests in $day_dir"
              pytest "$day_dir"test_*.py -v
            else
              echo "No tests found in $day_dir"
              exit 1
            fi
            
            # Run the solution
            if ls "$day_dir"day*.py 1> /dev/null 2>&1; then
              echo "Running solution in $day_dir"
              python "$day_dir"day*.py
            else
              echo "No solution found in $day_dir"
              exit 1
            fi
          done
        done
